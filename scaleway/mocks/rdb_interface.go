// Code generated by MockGen. DO NOT EDIT.
// Source: scaleway/rdb_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rdb "github.com/scaleway/scaleway-sdk-go/api/rdb/v1"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
)

// MockRdbApiInterface is a mock of RdbApiInterface interface.
type MockRdbApiInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRdbApiInterfaceMockRecorder
}

// MockRdbApiInterfaceMockRecorder is the mock recorder for MockRdbApiInterface.
type MockRdbApiInterfaceMockRecorder struct {
	mock *MockRdbApiInterface
}

// NewMockRdbApiInterface creates a new mock instance.
func NewMockRdbApiInterface(ctrl *gomock.Controller) *MockRdbApiInterface {
	mock := &MockRdbApiInterface{ctrl: ctrl}
	mock.recorder = &MockRdbApiInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRdbApiInterface) EXPECT() *MockRdbApiInterfaceMockRecorder {
	return m.recorder
}

// AddInstanceACLRules mocks base method.
func (m *MockRdbApiInterface) AddInstanceACLRules(req *rdb.AddInstanceACLRulesRequest, opts ...scw.RequestOption) (*rdb.AddInstanceACLRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddInstanceACLRules", varargs...)
	ret0, _ := ret[0].(*rdb.AddInstanceACLRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInstanceACLRules indicates an expected call of AddInstanceACLRules.
func (mr *MockRdbApiInterfaceMockRecorder) AddInstanceACLRules(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstanceACLRules", reflect.TypeOf((*MockRdbApiInterface)(nil).AddInstanceACLRules), varargs...)
}

// AddInstanceSettings mocks base method.
func (m *MockRdbApiInterface) AddInstanceSettings(req *rdb.AddInstanceSettingsRequest, opts ...scw.RequestOption) (*rdb.AddInstanceSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddInstanceSettings", varargs...)
	ret0, _ := ret[0].(*rdb.AddInstanceSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInstanceSettings indicates an expected call of AddInstanceSettings.
func (mr *MockRdbApiInterfaceMockRecorder) AddInstanceSettings(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstanceSettings", reflect.TypeOf((*MockRdbApiInterface)(nil).AddInstanceSettings), varargs...)
}

// CloneInstance mocks base method.
func (m *MockRdbApiInterface) CloneInstance(req *rdb.CloneInstanceRequest, opts ...scw.RequestOption) (*rdb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloneInstance", varargs...)
	ret0, _ := ret[0].(*rdb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneInstance indicates an expected call of CloneInstance.
func (mr *MockRdbApiInterfaceMockRecorder) CloneInstance(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneInstance", reflect.TypeOf((*MockRdbApiInterface)(nil).CloneInstance), varargs...)
}

// CreateDatabase mocks base method.
func (m *MockRdbApiInterface) CreateDatabase(req *rdb.CreateDatabaseRequest, opts ...scw.RequestOption) (*rdb.Database, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatabase", varargs...)
	ret0, _ := ret[0].(*rdb.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockRdbApiInterfaceMockRecorder) CreateDatabase(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockRdbApiInterface)(nil).CreateDatabase), varargs...)
}

// CreateDatabaseBackup mocks base method.
func (m *MockRdbApiInterface) CreateDatabaseBackup(req *rdb.CreateDatabaseBackupRequest, opts ...scw.RequestOption) (*rdb.DatabaseBackup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatabaseBackup", varargs...)
	ret0, _ := ret[0].(*rdb.DatabaseBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabaseBackup indicates an expected call of CreateDatabaseBackup.
func (mr *MockRdbApiInterfaceMockRecorder) CreateDatabaseBackup(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseBackup", reflect.TypeOf((*MockRdbApiInterface)(nil).CreateDatabaseBackup), varargs...)
}

// CreateInstance mocks base method.
func (m *MockRdbApiInterface) CreateInstance(req *rdb.CreateInstanceRequest, opts ...scw.RequestOption) (*rdb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstance", varargs...)
	ret0, _ := ret[0].(*rdb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockRdbApiInterfaceMockRecorder) CreateInstance(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockRdbApiInterface)(nil).CreateInstance), varargs...)
}

// CreateInstanceFromSnapshot mocks base method.
func (m *MockRdbApiInterface) CreateInstanceFromSnapshot(req *rdb.CreateInstanceFromSnapshotRequest, opts ...scw.RequestOption) (*rdb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstanceFromSnapshot", varargs...)
	ret0, _ := ret[0].(*rdb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromSnapshot indicates an expected call of CreateInstanceFromSnapshot.
func (mr *MockRdbApiInterfaceMockRecorder) CreateInstanceFromSnapshot(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromSnapshot", reflect.TypeOf((*MockRdbApiInterface)(nil).CreateInstanceFromSnapshot), varargs...)
}

// CreateSnapshot mocks base method.
func (m *MockRdbApiInterface) CreateSnapshot(req *rdb.CreateSnapshotRequest, opts ...scw.RequestOption) (*rdb.Snapshot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnapshot", varargs...)
	ret0, _ := ret[0].(*rdb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockRdbApiInterfaceMockRecorder) CreateSnapshot(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockRdbApiInterface)(nil).CreateSnapshot), varargs...)
}

// CreateUser mocks base method.
func (m *MockRdbApiInterface) CreateUser(req *rdb.CreateUserRequest, opts ...scw.RequestOption) (*rdb.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*rdb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRdbApiInterfaceMockRecorder) CreateUser(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRdbApiInterface)(nil).CreateUser), varargs...)
}

// DeleteDatabase mocks base method.
func (m *MockRdbApiInterface) DeleteDatabase(req *rdb.DeleteDatabaseRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatabase", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatabase indicates an expected call of DeleteDatabase.
func (mr *MockRdbApiInterfaceMockRecorder) DeleteDatabase(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockRdbApiInterface)(nil).DeleteDatabase), varargs...)
}

// DeleteDatabaseBackup mocks base method.
func (m *MockRdbApiInterface) DeleteDatabaseBackup(req *rdb.DeleteDatabaseBackupRequest, opts ...scw.RequestOption) (*rdb.DatabaseBackup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatabaseBackup", varargs...)
	ret0, _ := ret[0].(*rdb.DatabaseBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatabaseBackup indicates an expected call of DeleteDatabaseBackup.
func (mr *MockRdbApiInterfaceMockRecorder) DeleteDatabaseBackup(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabaseBackup", reflect.TypeOf((*MockRdbApiInterface)(nil).DeleteDatabaseBackup), varargs...)
}

// DeleteInstance mocks base method.
func (m *MockRdbApiInterface) DeleteInstance(req *rdb.DeleteInstanceRequest, opts ...scw.RequestOption) (*rdb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstance", varargs...)
	ret0, _ := ret[0].(*rdb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockRdbApiInterfaceMockRecorder) DeleteInstance(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockRdbApiInterface)(nil).DeleteInstance), varargs...)
}

// DeleteInstanceACLRules mocks base method.
func (m *MockRdbApiInterface) DeleteInstanceACLRules(req *rdb.DeleteInstanceACLRulesRequest, opts ...scw.RequestOption) (*rdb.DeleteInstanceACLRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstanceACLRules", varargs...)
	ret0, _ := ret[0].(*rdb.DeleteInstanceACLRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceACLRules indicates an expected call of DeleteInstanceACLRules.
func (mr *MockRdbApiInterfaceMockRecorder) DeleteInstanceACLRules(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceACLRules", reflect.TypeOf((*MockRdbApiInterface)(nil).DeleteInstanceACLRules), varargs...)
}

// DeleteInstanceSettings mocks base method.
func (m *MockRdbApiInterface) DeleteInstanceSettings(req *rdb.DeleteInstanceSettingsRequest, opts ...scw.RequestOption) (*rdb.DeleteInstanceSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstanceSettings", varargs...)
	ret0, _ := ret[0].(*rdb.DeleteInstanceSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceSettings indicates an expected call of DeleteInstanceSettings.
func (mr *MockRdbApiInterfaceMockRecorder) DeleteInstanceSettings(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceSettings", reflect.TypeOf((*MockRdbApiInterface)(nil).DeleteInstanceSettings), varargs...)
}

// DeleteSnapshot mocks base method.
func (m *MockRdbApiInterface) DeleteSnapshot(req *rdb.DeleteSnapshotRequest, opts ...scw.RequestOption) (*rdb.Snapshot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnapshot", varargs...)
	ret0, _ := ret[0].(*rdb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockRdbApiInterfaceMockRecorder) DeleteSnapshot(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockRdbApiInterface)(nil).DeleteSnapshot), varargs...)
}

// DeleteUser mocks base method.
func (m *MockRdbApiInterface) DeleteUser(req *rdb.DeleteUserRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRdbApiInterfaceMockRecorder) DeleteUser(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRdbApiInterface)(nil).DeleteUser), varargs...)
}

// ExportDatabaseBackup mocks base method.
func (m *MockRdbApiInterface) ExportDatabaseBackup(req *rdb.ExportDatabaseBackupRequest, opts ...scw.RequestOption) (*rdb.DatabaseBackup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportDatabaseBackup", varargs...)
	ret0, _ := ret[0].(*rdb.DatabaseBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportDatabaseBackup indicates an expected call of ExportDatabaseBackup.
func (mr *MockRdbApiInterfaceMockRecorder) ExportDatabaseBackup(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportDatabaseBackup", reflect.TypeOf((*MockRdbApiInterface)(nil).ExportDatabaseBackup), varargs...)
}

// GetDatabaseBackup mocks base method.
func (m *MockRdbApiInterface) GetDatabaseBackup(req *rdb.GetDatabaseBackupRequest, opts ...scw.RequestOption) (*rdb.DatabaseBackup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatabaseBackup", varargs...)
	ret0, _ := ret[0].(*rdb.DatabaseBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseBackup indicates an expected call of GetDatabaseBackup.
func (mr *MockRdbApiInterfaceMockRecorder) GetDatabaseBackup(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseBackup", reflect.TypeOf((*MockRdbApiInterface)(nil).GetDatabaseBackup), varargs...)
}

// GetInstance mocks base method.
func (m *MockRdbApiInterface) GetInstance(req *rdb.GetInstanceRequest, opts ...scw.RequestOption) (*rdb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstance", varargs...)
	ret0, _ := ret[0].(*rdb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockRdbApiInterfaceMockRecorder) GetInstance(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockRdbApiInterface)(nil).GetInstance), varargs...)
}

// GetInstanceCertificate mocks base method.
func (m *MockRdbApiInterface) GetInstanceCertificate(req *rdb.GetInstanceCertificateRequest, opts ...scw.RequestOption) (*scw.File, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceCertificate", varargs...)
	ret0, _ := ret[0].(*scw.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceCertificate indicates an expected call of GetInstanceCertificate.
func (mr *MockRdbApiInterfaceMockRecorder) GetInstanceCertificate(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceCertificate", reflect.TypeOf((*MockRdbApiInterface)(nil).GetInstanceCertificate), varargs...)
}

// GetInstanceLog mocks base method.
func (m *MockRdbApiInterface) GetInstanceLog(req *rdb.GetInstanceLogRequest, opts ...scw.RequestOption) (*rdb.InstanceLog, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceLog", varargs...)
	ret0, _ := ret[0].(*rdb.InstanceLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLog indicates an expected call of GetInstanceLog.
func (mr *MockRdbApiInterfaceMockRecorder) GetInstanceLog(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLog", reflect.TypeOf((*MockRdbApiInterface)(nil).GetInstanceLog), varargs...)
}

// GetInstanceMetrics mocks base method.
func (m *MockRdbApiInterface) GetInstanceMetrics(req *rdb.GetInstanceMetricsRequest, opts ...scw.RequestOption) (*rdb.InstanceMetrics, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceMetrics", varargs...)
	ret0, _ := ret[0].(*rdb.InstanceMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceMetrics indicates an expected call of GetInstanceMetrics.
func (mr *MockRdbApiInterfaceMockRecorder) GetInstanceMetrics(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetrics", reflect.TypeOf((*MockRdbApiInterface)(nil).GetInstanceMetrics), varargs...)
}

// GetServiceInfo mocks base method.
func (m *MockRdbApiInterface) GetServiceInfo(req *rdb.GetServiceInfoRequest, opts ...scw.RequestOption) (*scw.ServiceInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceInfo", varargs...)
	ret0, _ := ret[0].(*scw.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceInfo indicates an expected call of GetServiceInfo.
func (mr *MockRdbApiInterfaceMockRecorder) GetServiceInfo(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInfo", reflect.TypeOf((*MockRdbApiInterface)(nil).GetServiceInfo), varargs...)
}

// GetSnapshot mocks base method.
func (m *MockRdbApiInterface) GetSnapshot(req *rdb.GetSnapshotRequest, opts ...scw.RequestOption) (*rdb.Snapshot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnapshot", varargs...)
	ret0, _ := ret[0].(*rdb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockRdbApiInterfaceMockRecorder) GetSnapshot(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockRdbApiInterface)(nil).GetSnapshot), varargs...)
}

// ListDatabaseBackups mocks base method.
func (m *MockRdbApiInterface) ListDatabaseBackups(req *rdb.ListDatabaseBackupsRequest, opts ...scw.RequestOption) (*rdb.ListDatabaseBackupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabaseBackups", varargs...)
	ret0, _ := ret[0].(*rdb.ListDatabaseBackupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabaseBackups indicates an expected call of ListDatabaseBackups.
func (mr *MockRdbApiInterfaceMockRecorder) ListDatabaseBackups(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabaseBackups", reflect.TypeOf((*MockRdbApiInterface)(nil).ListDatabaseBackups), varargs...)
}

// ListDatabaseEngines mocks base method.
func (m *MockRdbApiInterface) ListDatabaseEngines(req *rdb.ListDatabaseEnginesRequest, opts ...scw.RequestOption) (*rdb.ListDatabaseEnginesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabaseEngines", varargs...)
	ret0, _ := ret[0].(*rdb.ListDatabaseEnginesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabaseEngines indicates an expected call of ListDatabaseEngines.
func (mr *MockRdbApiInterfaceMockRecorder) ListDatabaseEngines(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabaseEngines", reflect.TypeOf((*MockRdbApiInterface)(nil).ListDatabaseEngines), varargs...)
}

// ListDatabases mocks base method.
func (m *MockRdbApiInterface) ListDatabases(req *rdb.ListDatabasesRequest, opts ...scw.RequestOption) (*rdb.ListDatabasesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabases", varargs...)
	ret0, _ := ret[0].(*rdb.ListDatabasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockRdbApiInterfaceMockRecorder) ListDatabases(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockRdbApiInterface)(nil).ListDatabases), varargs...)
}

// ListInstanceACLRules mocks base method.
func (m *MockRdbApiInterface) ListInstanceACLRules(req *rdb.ListInstanceACLRulesRequest, opts ...scw.RequestOption) (*rdb.ListInstanceACLRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstanceACLRules", varargs...)
	ret0, _ := ret[0].(*rdb.ListInstanceACLRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceACLRules indicates an expected call of ListInstanceACLRules.
func (mr *MockRdbApiInterfaceMockRecorder) ListInstanceACLRules(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceACLRules", reflect.TypeOf((*MockRdbApiInterface)(nil).ListInstanceACLRules), varargs...)
}

// ListInstanceLogs mocks base method.
func (m *MockRdbApiInterface) ListInstanceLogs(req *rdb.ListInstanceLogsRequest, opts ...scw.RequestOption) (*rdb.ListInstanceLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstanceLogs", varargs...)
	ret0, _ := ret[0].(*rdb.ListInstanceLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceLogs indicates an expected call of ListInstanceLogs.
func (mr *MockRdbApiInterfaceMockRecorder) ListInstanceLogs(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceLogs", reflect.TypeOf((*MockRdbApiInterface)(nil).ListInstanceLogs), varargs...)
}

// ListInstances mocks base method.
func (m *MockRdbApiInterface) ListInstances(req *rdb.ListInstancesRequest, opts ...scw.RequestOption) (*rdb.ListInstancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstances", varargs...)
	ret0, _ := ret[0].(*rdb.ListInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockRdbApiInterfaceMockRecorder) ListInstances(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockRdbApiInterface)(nil).ListInstances), varargs...)
}

// ListNodeTypes mocks base method.
func (m *MockRdbApiInterface) ListNodeTypes(req *rdb.ListNodeTypesRequest, opts ...scw.RequestOption) (*rdb.ListNodeTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodeTypes", varargs...)
	ret0, _ := ret[0].(*rdb.ListNodeTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodeTypes indicates an expected call of ListNodeTypes.
func (mr *MockRdbApiInterfaceMockRecorder) ListNodeTypes(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeTypes", reflect.TypeOf((*MockRdbApiInterface)(nil).ListNodeTypes), varargs...)
}

// ListPrivileges mocks base method.
func (m *MockRdbApiInterface) ListPrivileges(req *rdb.ListPrivilegesRequest, opts ...scw.RequestOption) (*rdb.ListPrivilegesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrivileges", varargs...)
	ret0, _ := ret[0].(*rdb.ListPrivilegesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrivileges indicates an expected call of ListPrivileges.
func (mr *MockRdbApiInterfaceMockRecorder) ListPrivileges(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivileges", reflect.TypeOf((*MockRdbApiInterface)(nil).ListPrivileges), varargs...)
}

// ListSnapshots mocks base method.
func (m *MockRdbApiInterface) ListSnapshots(req *rdb.ListSnapshotsRequest, opts ...scw.RequestOption) (*rdb.ListSnapshotsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshots", varargs...)
	ret0, _ := ret[0].(*rdb.ListSnapshotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockRdbApiInterfaceMockRecorder) ListSnapshots(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockRdbApiInterface)(nil).ListSnapshots), varargs...)
}

// ListUsers mocks base method.
func (m *MockRdbApiInterface) ListUsers(req *rdb.ListUsersRequest, opts ...scw.RequestOption) (*rdb.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsers", varargs...)
	ret0, _ := ret[0].(*rdb.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockRdbApiInterfaceMockRecorder) ListUsers(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockRdbApiInterface)(nil).ListUsers), varargs...)
}

// PrepareInstanceLogs mocks base method.
func (m *MockRdbApiInterface) PrepareInstanceLogs(req *rdb.PrepareInstanceLogsRequest, opts ...scw.RequestOption) (*rdb.PrepareInstanceLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareInstanceLogs", varargs...)
	ret0, _ := ret[0].(*rdb.PrepareInstanceLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareInstanceLogs indicates an expected call of PrepareInstanceLogs.
func (mr *MockRdbApiInterfaceMockRecorder) PrepareInstanceLogs(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareInstanceLogs", reflect.TypeOf((*MockRdbApiInterface)(nil).PrepareInstanceLogs), varargs...)
}

// RenewInstanceCertificate mocks base method.
func (m *MockRdbApiInterface) RenewInstanceCertificate(req *rdb.RenewInstanceCertificateRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenewInstanceCertificate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewInstanceCertificate indicates an expected call of RenewInstanceCertificate.
func (mr *MockRdbApiInterfaceMockRecorder) RenewInstanceCertificate(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewInstanceCertificate", reflect.TypeOf((*MockRdbApiInterface)(nil).RenewInstanceCertificate), varargs...)
}

// RestoreDatabaseBackup mocks base method.
func (m *MockRdbApiInterface) RestoreDatabaseBackup(req *rdb.RestoreDatabaseBackupRequest, opts ...scw.RequestOption) (*rdb.DatabaseBackup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreDatabaseBackup", varargs...)
	ret0, _ := ret[0].(*rdb.DatabaseBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDatabaseBackup indicates an expected call of RestoreDatabaseBackup.
func (mr *MockRdbApiInterfaceMockRecorder) RestoreDatabaseBackup(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDatabaseBackup", reflect.TypeOf((*MockRdbApiInterface)(nil).RestoreDatabaseBackup), varargs...)
}

// SetInstanceACLRules mocks base method.
func (m *MockRdbApiInterface) SetInstanceACLRules(req *rdb.SetInstanceACLRulesRequest, opts ...scw.RequestOption) (*rdb.SetInstanceACLRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetInstanceACLRules", varargs...)
	ret0, _ := ret[0].(*rdb.SetInstanceACLRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInstanceACLRules indicates an expected call of SetInstanceACLRules.
func (mr *MockRdbApiInterfaceMockRecorder) SetInstanceACLRules(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceACLRules", reflect.TypeOf((*MockRdbApiInterface)(nil).SetInstanceACLRules), varargs...)
}

// SetInstanceSettings mocks base method.
func (m *MockRdbApiInterface) SetInstanceSettings(req *rdb.SetInstanceSettingsRequest, opts ...scw.RequestOption) (*rdb.SetInstanceSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetInstanceSettings", varargs...)
	ret0, _ := ret[0].(*rdb.SetInstanceSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInstanceSettings indicates an expected call of SetInstanceSettings.
func (mr *MockRdbApiInterfaceMockRecorder) SetInstanceSettings(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceSettings", reflect.TypeOf((*MockRdbApiInterface)(nil).SetInstanceSettings), varargs...)
}

// SetPrivilege mocks base method.
func (m *MockRdbApiInterface) SetPrivilege(req *rdb.SetPrivilegeRequest, opts ...scw.RequestOption) (*rdb.Privilege, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetPrivilege", varargs...)
	ret0, _ := ret[0].(*rdb.Privilege)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPrivilege indicates an expected call of SetPrivilege.
func (mr *MockRdbApiInterfaceMockRecorder) SetPrivilege(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrivilege", reflect.TypeOf((*MockRdbApiInterface)(nil).SetPrivilege), varargs...)
}

// UpdateDatabaseBackup mocks base method.
func (m *MockRdbApiInterface) UpdateDatabaseBackup(req *rdb.UpdateDatabaseBackupRequest, opts ...scw.RequestOption) (*rdb.DatabaseBackup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatabaseBackup", varargs...)
	ret0, _ := ret[0].(*rdb.DatabaseBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatabaseBackup indicates an expected call of UpdateDatabaseBackup.
func (mr *MockRdbApiInterfaceMockRecorder) UpdateDatabaseBackup(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabaseBackup", reflect.TypeOf((*MockRdbApiInterface)(nil).UpdateDatabaseBackup), varargs...)
}

// UpdateInstance mocks base method.
func (m *MockRdbApiInterface) UpdateInstance(req *rdb.UpdateInstanceRequest, opts ...scw.RequestOption) (*rdb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInstance", varargs...)
	ret0, _ := ret[0].(*rdb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockRdbApiInterfaceMockRecorder) UpdateInstance(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockRdbApiInterface)(nil).UpdateInstance), varargs...)
}

// UpdateSnapshot mocks base method.
func (m *MockRdbApiInterface) UpdateSnapshot(req *rdb.UpdateSnapshotRequest, opts ...scw.RequestOption) (*rdb.Snapshot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSnapshot", varargs...)
	ret0, _ := ret[0].(*rdb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot.
func (mr *MockRdbApiInterfaceMockRecorder) UpdateSnapshot(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockRdbApiInterface)(nil).UpdateSnapshot), varargs...)
}

// UpdateUser mocks base method.
func (m *MockRdbApiInterface) UpdateUser(req *rdb.UpdateUserRequest, opts ...scw.RequestOption) (*rdb.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*rdb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRdbApiInterfaceMockRecorder) UpdateUser(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRdbApiInterface)(nil).UpdateUser), varargs...)
}

// UpgradeInstance mocks base method.
func (m *MockRdbApiInterface) UpgradeInstance(req *rdb.UpgradeInstanceRequest, opts ...scw.RequestOption) (*rdb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeInstance", varargs...)
	ret0, _ := ret[0].(*rdb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeInstance indicates an expected call of UpgradeInstance.
func (mr *MockRdbApiInterfaceMockRecorder) UpgradeInstance(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeInstance", reflect.TypeOf((*MockRdbApiInterface)(nil).UpgradeInstance), varargs...)
}

// WaitForInstance mocks base method.
func (m *MockRdbApiInterface) WaitForInstance(req *rdb.WaitForInstanceRequest, opts ...scw.RequestOption) (*rdb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForInstance", varargs...)
	ret0, _ := ret[0].(*rdb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForInstance indicates an expected call of WaitForInstance.
func (mr *MockRdbApiInterfaceMockRecorder) WaitForInstance(req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForInstance", reflect.TypeOf((*MockRdbApiInterface)(nil).WaitForInstance), varargs...)
}
